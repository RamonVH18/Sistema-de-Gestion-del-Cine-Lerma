/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pantallas.Empleados;

import BOs.EmpleadoBO;
import DTOs.EmpleadoDTO;
import Excepciones.ActualizacionEmpleadoException;
import Excepciones.Empleados.ActualizarEmpleadoException;
import Excepciones.ObtenerEmpleadoException;
import Excepciones.ValidacionEmpleadoIdException;
import Excepciones.ValidarEmpleadoException;
import GestionEmpleados.IManejoEmpleados;
import GestionEmpleados.ManejoEmpleados;
import control.ControlDeNavegacion;
import control.IControl;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author isaac
 */
public class ActualizarEmpleado extends javax.swing.JFrame {

    private IControl control = ControlDeNavegacion.getInstancia();
    private ListaEmpleados listaEmpleados;

    /**
     * Creates new form ActualizarEmpleado
     */
    public ActualizarEmpleado() {
        initComponents();

        this.listaEmpleados = new ListaEmpleados();
        scrollPanela.setViewportView(this.listaEmpleados);

        //  configuracion adiciones del frame
        setLocationRelativeTo(null); // centrar la ventana

        // cargar datos iniciales
        this.listaEmpleados.cargarEmpleadosActivos(); // el panel llama a esto en su constructor
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitulo = new javax.swing.JLabel();
        scrollPanela = new javax.swing.JScrollPane();
        btnVolver = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnDetalles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        labelTitulo.setText("ACTUALIZAR EMPLEADOS");

        btnVolver.setBackground(new java.awt.Color(162, 132, 94));
        btnVolver.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(162, 132, 94));
        btnActualizar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnDetalles.setBackground(new java.awt.Color(162, 132, 94));
        btnDetalles.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnDetalles.setForeground(new java.awt.Color(255, 255, 255));
        btnDetalles.setText("Ver detalles");
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelTitulo)
                .addGap(166, 166, 166))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnVolver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDetalles)
                        .addGap(221, 221, 221)
                        .addComponent(btnActualizar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(scrollPanela, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPanela, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnActualizar)
                            .addComponent(btnDetalles))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnVolver)
                        .addGap(14, 14, 14))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed

        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed

        EmpleadoDTO seleccionado = listaEmpleados.getEmpleadoSeleccionado();
        if (seleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un empleado de la lista.", "Selección Requerida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        StringBuilder detalles = new StringBuilder("<html><body><h2>Detalles del Empleado</h2>");
        detalles.append("<b>Nombre Completo:</b> ").append(seleccionado.getNombre()).append(" ").append(seleccionado.getApellidoP()).append(" ").append(seleccionado.getApellidoM()).append("<br>");
        detalles.append("<b>Correo Electrónico:</b> ").append(seleccionado.getCorreoE()).append("<br>");
        detalles.append("<b>Teléfono:</b> ").append(seleccionado.getTelefono()).append("<br>");

        int edad = 0;
        if (seleccionado.getFechaNacimiento() != null) {
            edad = Period.between(seleccionado.getFechaNacimiento().toLocalDate(), LocalDate.now()).getYears();
        }
        detalles.append("<b>Fecha de Nacimiento:</b> ").append(seleccionado.getFechaNacimiento() != null ? seleccionado.getFechaNacimiento().toLocalDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "N/A").append(" (Edad: ").append(edad).append(")<br>");
        detalles.append("<b>Cargo:</b> ").append(seleccionado.getCargo() != null ? seleccionado.getCargo().getDescripcion() : "N/A").append("<br>");
        detalles.append("<b>Sueldo:</b> $").append(String.format("%.2f", seleccionado.getSueldo())).append("<br>");
        detalles.append("<b>Fecha de Registro:</b> ").append(seleccionado.getFechaRegistro() != null ? seleccionado.getFechaRegistro().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "N/A").append("<br>");
        detalles.append("<h3>Dirección</h3>");
        detalles.append("<b>Calle:</b> ").append(seleccionado.getCalle()).append("<br>");
        detalles.append("<b>Colonia:</b> ").append(seleccionado.getColonia()).append("<br>");
        detalles.append("<b>Número Exterior:</b> ").append(seleccionado.getNumExterior()).append("<br>");
        detalles.append("<b>Estado:</b> ").append(seleccionado.isActivo() ? "Activo" : "Inactivo").append("<br>");
        detalles.append("</body></html>");

        JOptionPane.showMessageDialog(this, detalles.toString(), "Detalles de " + seleccionado.getNombre(), JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnDetallesActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        EmpleadoDTO empleadoSeleccionado = listaEmpleados.getEmpleadoSeleccionado();

        if (empleadoSeleccionado != null) {
            ActualizarEmpleadoDatos frameActualizar = null; // 1. Declara la variable fuera del try-catch

            try {
                // 2. La instanciación va dentro del try, ya que el constructor PUEDE lanzar excepciones
                frameActualizar = new ActualizarEmpleadoDatos(empleadoSeleccionado.getId());

                // 3. Si la instanciación fue exitosa (no hubo excepción), entonces frameActualizar SÍ está inicializado.
                //    Por lo tanto, las siguientes líneas deben ir DENTRO del try o en un bloque 'finally'
                //    con una comprobación de nulidad, o después del try-catch si la variable
                //    se inicializa a null y se comprueba. Moverlas dentro del try es más limpio aquí.
                frameActualizar.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                        // Este evento se dispara después de que frameActualizar se cierra con dispose().
                        System.out.println("Ventana ActualizarEmpleadoDatos cerrada, intentando refrescar lista...");
                        // Sería ideal si 'frameActualizar' pudiera indicar si realmente se guardaron cambios.
                        // ActualizarEmpleadoDatos necesitaría un método como: public boolean datosFueronGuardados()
                        // if (frameActualizar.datosFueronGuardados()) {
                        //    listaEmpleados.cargarEmpleadosActivos();
                        // }
                        // Por ahora, simplemente recargamos:
                        listaEmpleados.cargarEmpleadosActivos();
                    }
                });

                frameActualizar.setVisible(true);

                // this.dispose(); // Decide si realmente quieres cerrar la ventana actual.
                // Si lo haces, el WindowListener de arriba podría no ser la mejor
                // forma de refrescar, ya que esta ventana ya no existiría.
            } catch (ValidarEmpleadoException vex) { // Excepciones que PUEDE lanzar el constructor de ActualizarEmpleadoDatos
                JOptionPane.showMessageDialog(this,
                        "Error al preparar la ventana de actualización (validación): " + vex.getMessage(),
                        "Error de Preparación", JOptionPane.ERROR_MESSAGE);
                // frameActualizar podría ser null aquí si la excepción ocurrió muy temprano en el constructor.
            } catch (ObtenerEmpleadoException opex) { // Excepciones que PUEDE lanzar el constructor de ActualizarEmpleadoDatos
                JOptionPane.showMessageDialog(this,
                        "Error al preparar la ventana de actualización (operación): " + opex.getMessage(),
                        "Error de Preparación", JOptionPane.ERROR_MESSAGE);
                if (opex.getCause() != null) {
                    System.err.println("Causa original (constructor ActualizarEmpleadoDatos): " + opex.getCause().getMessage());
                }
            } catch (Exception e) { // Para cualquier otra excepción inesperada durante la creación
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Ocurrió un error inesperado al abrir la ventana de actualización: " + e.getMessage(),
                        "Error Crítico", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un empleado para editar.", "Selección Requerida", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActualizarEmpleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActualizarEmpleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActualizarEmpleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActualizarEmpleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActualizarEmpleado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JScrollPane scrollPanela;
    // End of variables declaration//GEN-END:variables
}
