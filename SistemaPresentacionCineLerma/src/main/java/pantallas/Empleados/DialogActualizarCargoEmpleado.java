/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package pantallas.Empleados;

import BOs.EmpleadoBO;
import DTOs.EmpleadoDTO;
import Excepciones.ActualizacionDeCargoException;
import Excepciones.Empleados.ActualizarEmpleadoException;
import Excepciones.Empleados.ValidacionEmpleadoException;
import Excepciones.PersistenciaException;
import Excepciones.ValidacionEmpleadoIdException;
import GestionEmpleados.IManejoEmpleados;
import GestionEmpleados.ManejoEmpleados;
import enums.Cargo;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.bson.types.ObjectId;

/**
 *
 * @author isaac
 */
public class DialogActualizarCargoEmpleado extends javax.swing.JDialog {

    private IManejoEmpleados manejoEmpleados;
    private String empleadoIdActualizar;
    private EmpleadoDTO empleadoActualDTO;

    /**
     * Creates new form DialogActualizarCargoEmpleado
     */
    public DialogActualizarCargoEmpleado(java.awt.Frame parent, boolean modal, EmpleadoDTO empleadoAActualizar) {
        super(parent, modal);
        this.manejoEmpleados = ManejoEmpleados.getInstance();
        this.empleadoActualDTO = empleadoAActualizar;

        if (empleadoAActualizar == null || empleadoAActualizar.getId() == null) {
            // Manejar error, no debería pasar si la selección fue correcta
            JOptionPane.showMessageDialog(parent, "No se seleccionó un empleado válido.", "Error", JOptionPane.ERROR_MESSAGE);
            // Cierra inmediatamente si no hay empleado
            SwingUtilities.invokeLater(() -> this.dispose());
            // initComponents() puede dar error si empleadoActualDTO es null y lo usas ahí
            // así que llamamos a initComponents() después de esta verificación o con un empleado dummy
            // o no llamamos a poblar datos si es null.
            // Por simplicidad, asumiremos que empleadoAActualizar es válido.
            // Si no, el que llama a este diálogo no debería hacerlo con un DTO null.
            this.empleadoIdActualizar = null; // Marcar para que no proceda
        } else {
            this.empleadoIdActualizar = empleadoAActualizar.getId();
        }

        initComponents();
        configurarDialog();
        poblarDatos();
    }

    private void configurarDialog() {
        pack();
        setLocationRelativeTo(getParent());
    }

    private void poblarDatos() {

        if (empleadoActualDTO == null) {
            return;
        }

        DefaultComboBoxModel<Cargo> cargoModel = new DefaultComboBoxModel<>();
        for (Cargo cargoEnum : Cargo.values()) {
            cargoModel.addElement(cargoEnum);
        }

        comboboxCargo.setModel(cargoModel);

        // Opcional: Preseleccionar el cargo actual del empleado
        if (empleadoActualDTO.getCargo() != null) {
            comboboxCargo.setSelectedItem(empleadoActualDTO.getCargo());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        labelTitulo = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        labelCargo = new javax.swing.JLabel();
        comboboxCargo = new javax.swing.JComboBox<>();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        labelTitulo.setText("Actualizar cargo del empleado");

        btnAceptar.setBackground(new java.awt.Color(162, 132, 94));
        btnAceptar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnAceptar.setForeground(new java.awt.Color(255, 255, 255));
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnVolver.setBackground(new java.awt.Color(162, 132, 94));
        btnVolver.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        labelCargo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelCargo.setText("Selecciona el nuevo cargo del empleado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelTitulo)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addGap(29, 29, 29))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(labelCargo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(comboboxCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addGap(162, 162, 162)
                .addComponent(labelCargo)
                .addGap(35, 35, 35)
                .addComponent(comboboxCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnVolver))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        
        // validacion simple que no este nulo o vacio
        if (empleadoIdActualizar == null || empleadoIdActualizar.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: No hay un empleado seleccionado para actualizar.", "Error Interno", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Cargo nuevoCargoSeleccionado = (Cargo) comboboxCargo.getSelectedItem(); // agararamos el cargo del comboBox
        
        // validacion simple que no este nulo el cargo
        if (nuevoCargoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un nuevo cargo.", "Validación", JOptionPane.WARNING_MESSAGE);
            comboboxCargo.requestFocusInWindow();
            return;
        }

        // verificar que no sea el mismo cargo, si es el mismo, va tirar un mensaje 
        if (empleadoActualDTO != null && empleadoActualDTO.getCargo() == nuevoCargoSeleccionado) {
            JOptionPane.showMessageDialog(this, "El cargo seleccionado es el mismo que el actual. No se realizarán cambios.", "Información", JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); // Cierra el dialogo
            return;
        }

        // Confirmación antes de actualizar
        String nombreCompletoEmpleado = (empleadoActualDTO != null) ? (empleadoActualDTO.getNombre() + " " + empleadoActualDTO.getApellidoP()) : "ID " + empleadoIdActualizar;
        String descripcionNuevoCargo = (nuevoCargoSeleccionado.getDescripcion() != null) ? nuevoCargoSeleccionado.getDescripcion() : nuevoCargoSeleccionado.toString(); // Asumiendo que Cargo tiene getDescripcion() o un buen toString()

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de que desea cambiar el cargo del empleado "
                + nombreCompletoEmpleado + " a '" + descripcionNuevoCargo + "'?",
                "Confirmar Actualización de Cargo",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Llamar al método de ManejoEmpleados
                boolean exito = manejoEmpleados.actualizarCargoEmpleado(this.empleadoIdActualizar, nuevoCargoSeleccionado);

                if (exito) {
                    JOptionPane.showMessageDialog(this, "El cargo del empleado ha sido actualizado exitosamente.", "Actualización Exitosa", JOptionPane.INFORMATION_MESSAGE);
                    // Aquí podrías tener una forma de notificar a la ventana anterior que hubo un cambio
                    // por ejemplo, si este diálogo tiene un método como `public boolean seActualizoConExito()`
                    // this.actualizacionExitosa = true; // Variable de instancia del diálogo
                    this.dispose(); // Cierra este diálogo
                } else {
                    // Si el método de ManejoEmpleados devuelve false sin lanzar excepción
                    // (aunque usualmente es mejor lanzar excepción para fallos).
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar el cargo del empleado (la operación no indicó error pero no tuvo éxito).", "Error de Actualización", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ValidacionEmpleadoIdException vex) { // Excepción de la capa de Manejo
                JOptionPane.showMessageDialog(this, "Error de validación: " + vex.getMessage(), "Error en Actualización", JOptionPane.ERROR_MESSAGE);
            } catch (ActualizacionDeCargoException opex) { // Excepción de la capa de Manejo
                JOptionPane.showMessageDialog(this, "Error en la operación: " + opex.getMessage(), "Error en Actualización", JOptionPane.ERROR_MESSAGE);
                if (opex.getCause() != null) {
                    System.err.println("Causa original (Actualizar Cargo): " + opex.getCause().getMessage());
                }
            } catch (Exception e) { // Captura genérica para cualquier otro imprevisto
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<Cargo> comboboxCargo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel labelCargo;
    private javax.swing.JLabel labelTitulo;
    // End of variables declaration//GEN-END:variables
}
