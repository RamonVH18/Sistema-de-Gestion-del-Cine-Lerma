/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package pantallas;

import DTOs.CuentaMercadoDTO;
import DTOs.PagoDTO;
import Excepciones.GestionReservaException;
import java.awt.Graphics;
import java.time.LocalDateTime;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Sebastian Borquez
 */
public class PantallaPagoMercado extends PantallaPago {

    private ControlDeNavegacion control = ControlDeNavegacion.getInstancia();

    private int numAsientos = 0;

    /**
     * Creates new form PantallaPagoMercado
     */
    public PantallaPagoMercado(int numero) throws GestionReservaException {
        initComponents();
        setearTotalPagar();

        this.numAsientos = numero;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.drawLine(0, 510, getWidth(), 510);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        textClienteID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textMontoAPagar = new javax.swing.JTextField();
        btnPagar = new javax.swing.JButton();
        labelimagen = new javax.swing.JLabel();
        btnRegresoMenu1 = new javax.swing.JButton();
        labelPago = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(514, 632));
        setSize(new java.awt.Dimension(420, 550));

        Titulo.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 64)); // NOI18N
        Titulo.setText("MercadoPago");

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel1.setText("ClienteID:");

        textClienteID.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        textClienteID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textClienteIDActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel2.setText("Monto a pagar:");

        textMontoAPagar.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        textMontoAPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMontoAPagarActionPerformed(evt);
            }
        });

        btnPagar.setBackground(new java.awt.Color(255, 149, 0));
        btnPagar.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 24)); // NOI18N
        btnPagar.setForeground(new java.awt.Color(255, 255, 255));
        btnPagar.setText("Pagar");
        btnPagar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        labelimagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mercadoPago.jpg"))); // NOI18N
        labelimagen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnRegresoMenu1.setBackground(new java.awt.Color(162, 132, 94));
        btnRegresoMenu1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 24)); // NOI18N
        btnRegresoMenu1.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresoMenu1.setText("<Volver");
        btnRegresoMenu1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnRegresoMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresoMenu1ActionPerformed(evt);
            }
        });

        labelPago.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(Titulo)
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelimagen)))
                .addGap(115, 115, 115))
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textClienteID)
                    .addComponent(textMontoAPagar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPago)
                            .addComponent(btnRegresoMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelimagen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textClienteID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textMontoAPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(labelPago)
                .addGap(33, 33, 33)
                .addComponent(btnRegresoMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textClienteIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textClienteIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textClienteIDActionPerformed

    private void textMontoAPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMontoAPagarActionPerformed

    }//GEN-LAST:event_textMontoAPagarActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        //Al presionar el boton se van a hacer las validaciones de los campos, la cuenta y el pago, si se logran pasar todas exitosamente entonces se mostrata la pantalla de detalles del boleto, es decir el resumen de la compra
        //PRIMERO SE DEBEN VALIDAR LOS CAMPOS
        if (!validarCampos()) {
            return;
        }

        //DESPUES SE DEBE VALIDAR EL PAGO
        if (!validarPago()) {
            dispose();
            control.mostrarPantallaPagoRechazado();
            return;
        }

        //Mostrar pantalla de detalle de la compra hecha, en caso de que el pago y la cuenta ingresada sean correctos
        control.mostrarDetalleBoleto();
        dispose();


    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnRegresoMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresoMenu1ActionPerformed
        control.mostrarSeleccionarMetodoPago();
        dispose();
    }//GEN-LAST:event_btnRegresoMenu1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnRegresoMenu1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelPago;
    private javax.swing.JLabel labelimagen;
    private javax.swing.JTextField textClienteID;
    private javax.swing.JTextField textMontoAPagar;
    // End of variables declaration//GEN-END:variables

    /**
     * Valida los campos de entrada para asegurarse de que no esten vacios y que
     * contengan valores validos.
     *
     * @return true si todos los campos son validos y cumplen con las
     * condiciones necesarias; false si hay algun error en la validacion.
     */
    public boolean validarCampos() {
        //Se muestra un error si alguno de los dos campos estan vacios
        if (textClienteID.getText().trim().isEmpty() || textMontoAPagar.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ERROR: No pueden haber campos vacios", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //Se valida que el id ingresado sea una combinacion de digitos enteros y nada mas
        if (!textClienteID.getText().trim().matches("-?\\d+")) {
            JOptionPane.showMessageDialog(null, "ERROR: Por favor ingresa un ID de cliente valida", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // El monto ingresado es un número entero valido
        if (!textMontoAPagar.getText().trim().matches("-?\\d+")) {
            JOptionPane.showMessageDialog(null, "ERROR: Por favor ingresa un monto válido", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        CuentaMercadoDTO cuentaMercado = construirDTO();

        //El metodo de mercadoPago tiene la peculiaridad de que se tiene que ingresar el monto que se desea pagar, aunque mas adelante se valida
        //que el monto a pagar que se ingresa sea el mismo que el monto que se debe pagar, como los precios se manejan en double
        //se tiene que parsear el contenido de textMontoAPagar (numero entero) a un valor double
        Double monto = Double.valueOf(textMontoAPagar.getText().trim());
        double costoTotal = control.calcularCostoTotal();

        if (costoTotal == 0) {
            return false;
        }

        if (monto > costoTotal || monto < costoTotal) {
            JOptionPane.showMessageDialog(null, "ERROR: El monto a pagar es mayor o menor que el total a pagar (debe ser el mismo)", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //Se valida la cuenta segun el dto creado 
        if (control.verificarCuentaMercado(cuentaMercado) == null) {
            JOptionPane.showMessageDialog(null, "ERROR: Cuenta invalida", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Construye un objeto CuentaMercadoDTO a partir de los datos ingresados en
     * el campo de texto del ID del cliente.
     *
     * @return un objeto CuentaMercadoDTO con el ID del cliente establecido.
     */
    private CuentaMercadoDTO construirDTO() {
        //Crear DTO
        CuentaMercadoDTO cuentaMercado = new CuentaMercadoDTO();
        //El id que se utilizara para validar la cuenta se obtiene de parsear en contenido del field en un valor entero
        int clienteID = Integer.parseInt(textClienteID.getText().trim());
        cuentaMercado.setClienteID(clienteID);
        return cuentaMercado;
    }

    /**
     * Construye un objeto PagoDTO a partir de los datos ingresados en el campo
     * de texto del monto a pagar.
     *
     * @return un objeto PagoDTO con el monto y la fecha/hora del pago
     * establecidos.
     */
    private PagoDTO construirPagoDTO() {
        //Crear DTO
        LocalDateTime fechaHoy = LocalDateTime.now();
        PagoDTO pago = new PagoDTO();
        Double monto = Double.valueOf(textMontoAPagar.getText().trim());
        pago.setEstado(true);
        pago.setFechaHora(fechaHoy);
        pago.setMonto(monto);
        return pago;
    }

    /**
     * Valida el pago a realizar, asegurandose de que el monto no exceda el
     * saldo de la cuenta del cliente.
     *
     * @return true si el pago es valido y se procesa correctamente; false si el
     * monto del pago es mayor que el saldo de la cuenta.
     */
    public boolean validarPago() {
        PagoDTO pagoloco = construirPagoDTO();
        CuentaMercadoDTO cuentaMercado = construirDTO();
        CuentaMercadoDTO cuentaMercadoExistente = control.verificarCuentaMercado(cuentaMercado);
        if (cuentaMercadoExistente == null) {
            return true;
        }

        if (pagoloco.getMonto() > cuentaMercadoExistente.getSaldo()) {
            return false;
        }
        //Llama a los metodos de control para procesar el pago y finalmente actualizar el saldo de la cuenta segun la transaccion
        control.procesarPagoMercado(cuentaMercadoExistente, pagoloco);
        control.actualizarSaldoMercado(cuentaMercadoExistente, pagoloco);
        //Regresa un valor true por que el pago se valido exitosamente
        return true;

    }

    /**
     * Establece el total a pagar en la etiqueta correspondiente, calculando el
     * costo total a través del control.
     */
    private void setearTotalPagar() {
        String total = Double.toString(control.calcularCostoTotal());
        labelPago.setText("Total a pagar: " + total);
    }

}
