/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package pantallas.Pagos;

import control.ControlDeNavegacion;
import DTOs.PagoDTO;
import DTOs.PaypalDTO;
import control.IControl;
import java.time.LocalDateTime;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author Abraham Coronel Bringas
 *
 */
public class PantallaPagoPaypal extends PantallaPago {

    private final IControl control = ControlDeNavegacion.getInstancia();

    /**
     * Creates new form PantallaPagoPaypal
     */
    public PantallaPagoPaypal(){
        initComponents();
        setearTotalPagar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        TituloPaypal = new javax.swing.JLabel();
        labelCorreo = new javax.swing.JLabel();
        textCorreo = new javax.swing.JTextField();
        labelTextoIniciarSesion = new javax.swing.JLabel();
        labelContrasenia = new javax.swing.JLabel();
        btnIniciarSesion = new javax.swing.JButton();
        btnRegresoMenu = new javax.swing.JButton();
        textContrasenia = new javax.swing.JPasswordField();
        labelPago = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(320, 415));
        setSize(new java.awt.Dimension(420, 550));

        TituloPaypal.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 64)); // NOI18N
        TituloPaypal.setText("Paypal");

        labelCorreo.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        labelCorreo.setText("Correo:");

        textCorreo.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        textCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCorreoActionPerformed(evt);
            }
        });

        labelTextoIniciarSesion.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        labelTextoIniciarSesion.setText("Inicie sesion para vincular su cuenta de Paypal");

        labelContrasenia.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        labelContrasenia.setText("Contrase√±a:");

        btnIniciarSesion.setBackground(new java.awt.Color(0, 122, 255));
        btnIniciarSesion.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 24)); // NOI18N
        btnIniciarSesion.setForeground(new java.awt.Color(255, 255, 255));
        btnIniciarSesion.setText("Iniciar sesion");
        btnIniciarSesion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnIniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarSesionActionPerformed(evt);
            }
        });

        btnRegresoMenu.setBackground(new java.awt.Color(162, 132, 94));
        btnRegresoMenu.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 24)); // NOI18N
        btnRegresoMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresoMenu.setText("<Volver");
        btnRegresoMenu.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnRegresoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresoMenuActionPerformed(evt);
            }
        });

        textContrasenia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textContraseniaActionPerformed(evt);
            }
        });

        labelPago.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(btnIniciarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPago)
                            .addComponent(btnRegresoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TituloPaypal)
                .addGap(179, 179, 179))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textCorreo)
                    .addComponent(labelTextoIniciarSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelContrasenia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textContrasenia))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(TituloPaypal)
                .addGap(51, 51, 51)
                .addComponent(labelTextoIniciarSesion)
                .addGap(18, 18, 18)
                .addComponent(labelCorreo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelContrasenia)
                .addGap(18, 18, 18)
                .addComponent(textContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnIniciarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(labelPago)
                .addGap(32, 32, 32)
                .addComponent(btnRegresoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCorreoActionPerformed

    private void btnRegresoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresoMenuActionPerformed
        control.mostrarSeleccionarMetodoPago(control.consultarFuncion());
        dispose();
    }//GEN-LAST:event_btnRegresoMenuActionPerformed

    private void textContraseniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textContraseniaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textContraseniaActionPerformed

    private void btnIniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarSesionActionPerformed
        // TODO add your handling code here:

        //PRIMERO SE DEBEN VALIDAR LOS CAMPOS
        if (!validarCampos()) {
            return;
        }

        //DESPUES SE DEBE VALIDAR EL PAGO
        //En caso de que el pago falle entonces se enviara a la pantalla de pago rechazado
        if (!validarPagoPaypal()) {
            dispose();
            control.mostrarPantallaPagoRechazado();
            return;
        }
        //Mostrar pantalla de detalle de la compra hecha, en caso de que el pago y la cuenta ingresada sean correctos y validados

        control.mostrarDetalleBoleto();
        dispose();

    }//GEN-LAST:event_btnIniciarSesionActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TituloPaypal;
    private javax.swing.JButton btnIniciarSesion;
    private javax.swing.JButton btnRegresoMenu;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JLabel labelContrasenia;
    private javax.swing.JLabel labelCorreo;
    private javax.swing.JLabel labelPago;
    private javax.swing.JLabel labelTextoIniciarSesion;
    private javax.swing.JPasswordField textContrasenia;
    private javax.swing.JTextField textCorreo;
    // End of variables declaration//GEN-END:variables
    /**
     * Valida los campos de entrada para asegurarse de que no esten vacios y que
     * el formato del correo sea correcto.
     *
     * @return true si todos los campos son validos; false si hay algun error en
     * la validacion.
     */
    public boolean validarCampos() {
        //Se verifica que no hayan campos vacios
        //primero se convierten los chars a string
        char[] contraseniaChars = textContrasenia.getPassword();
        String contrasenia = new String(contraseniaChars);

        if (textCorreo.getText().trim().isEmpty() || contrasenia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "ERROR: No pueden haber campos vacios", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //Se verifica si el formato del correo ingresado en el campo es correcto
        if (!textCorreo.getText().trim().matches("^[\\w.-]+@([a-zA-Z\\d-]+\\.)+[a-zA-Z]{2,6}$")) {
            JOptionPane.showMessageDialog(null, "ERROR: Por favor ingresa un Correo valido", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        Arrays.fill(contraseniaChars, '\0');
        return true;
    }

    /**
     * Construye un objeto PaypalDTO a partir de los datos ingresados en los
     * campos de texto del correo y la contrase√±a.
     *
     * @return un objeto PaypalDTO con el correo y la contrase√±a establecidos.
     */
    private PaypalDTO construirDTO() {
        //En esta parte la contrase√±a se escribe en forma de **********, por lo que hay que sacar un arreglo de char[] con .getPassword
        char[] contraseniaChars = textContrasenia.getPassword();
        //Ese arreglo de Chars se parsea a String
        String contrasenia = new String(contraseniaChars);
        //Crear DTO, se contruye el DTO con los datos ingresados por el usuario
        PaypalDTO cuentaPaypal = new PaypalDTO();
        String correoVerificado = textCorreo.getText();
        String contraseniaVerificada = contrasenia;
        cuentaPaypal.setCorreo(correoVerificado);
        cuentaPaypal.setContrasenia(contraseniaVerificada);
        return cuentaPaypal;
    }

    /**
     * Construye un objeto PagoDTO a partir del costo total calculado.
     *
     * @return un objeto PagoDTO con el monto y la fecha/hora del pago
     * establecidos.
     */
    private PagoDTO construirPagoDTO() {
        //Crear DTO
        //La fecha del pago es la de hoy, para obtener la fecha actual del sistema se crea un Date
        LocalDateTime fechaHoy =  LocalDateTime.now();
        PagoDTO pago = new PagoDTO();
        //Para obtener el monto del pago se necesita llamar al metodo de control para calcular el costo total de los asientos segun el precio del asiento y la cantidad, regresara un double
        Double monto = control.calcularCostoTotal();
        pago.setEstado(true);
        pago.setFechaHora(fechaHoy);
        pago.setMonto(monto);
        return pago;
    }

    /**
     * Valida el pago a realizar a traves de PayPal, asegurandose de que el
     * monto no exceda el saldo de la cuenta de PayPal del cliente.
     *
     * @return true si el pago es valido y se procesa correctamente; false si la
     * cuenta de PayPal no existe o si el monto del pago es mayor que el saldo
     * de la cuenta.
     */
    public boolean validarPagoPaypal() {
        PagoDTO pagoPaypal = construirPagoDTO();
        PaypalDTO cuentaPaypal = construirDTO();
        //Se verifica si la cuenta de paypal existe
        PaypalDTO cuentaPaypalExistente = control.verificarCuentaPaypal(cuentaPaypal);
        if (cuentaPaypalExistente == null) {
            return false;
        }
        //Validacion de si el monto a pagar es mayor al saldo de la cuenta, en ese caso regresara false y la validacion del pago fallara
        if (pagoPaypal.getMonto() > cuentaPaypalExistente.getSaldo()) {
            return false;
        }

        //Llama a los metodos de control para procesar el pago y finalmente actualizar el saldo de la cuenta segun la transaccion
        control.procesarPagoPaypal(cuentaPaypalExistente, pagoPaypal);
        control.actualizarSaldoPaypal(cuentaPaypalExistente, pagoPaypal);
        return true;

    }

    /**
     * Establece el total a pagar en la etiqueta correspondiente, calculando el
     * costo total a traves del control.
     */
    private void setearTotalPagar() {
        String total = Double.toString(control.calcularCostoTotal());
        labelPago.setText("Total a pagar: " + total);
    }

}
